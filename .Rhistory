dataset <- GetData(country)
Infected <- as.numeric(dataset$Infected)
DateLabels <- dataset$Date
Day <- 1:(length(Infected))
N <- GetPoblation(country)
old <- par(mfrow = c(1, 2))
plot(Day, Infected, type ="b")
axis(1, at=1:len(Day), labels=DateLabels)
axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, lenght(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.2, labels = DateLabels, srt = 45, pos = 1, xpd = TRUE)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
old <- par(mfrow = c(1, 2))
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.2, labels = DateLabels, srt = 45, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.2, labels = DateLabels, srt = 45, pos = 1, xpd = TRUE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.2, labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.2, labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.5, labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 5, labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3, y = par("usr")[4],  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3, y = par("usr")[3],  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3, y = par("usr")[3]-3,  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
plot(Day, Infected, type ="b")
#axis(1, at=1:length(Day), labels=DateLabels)
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3,  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
plot(Day, Infected, log = "y")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3,  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
axis(2, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3,  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3,  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
# Second plot
plot(Day, Infected, log = "y")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), par("usr")[3] - 0.3,  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
abline(lm(log10(Infected) ~ Day))
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.1*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, cex=0.5, xpd = TRUE)
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.1*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.01*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.05*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.05*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 45, pos = 1, xpd = TRUE)
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.05*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1), y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1)-0.5, y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
plot(Day, Infected, log = "y")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
abline(lm(log10(Infected) ~ Day))
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]-0.01*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]+0.1*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]+0.3*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
old <- par(mfrow = c(1, 2), xaxt="n")
# First plot
plot(Day, Infected, type ="b")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]-0.02*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
# Second plot
plot(Day, Infected, log = "y")
axis(1, at=seq(1, length(Day), by=1), labels = FALSE)
text(seq(1, length(Day), by=1)-0.3, y=par()$usr[3]+0.3*(par()$usr[4]-par()$usr[3]),  labels = DateLabels, srt = 90, pos = 1, xpd = TRUE)
abline(lm(log10(Infected) ~ Day))
title(paste("Total infections COVID-19", country, sep = " - "), outer = TRUE, line = -2)
runApp('C:/Users/kerik/OneDrive - Universitat Oberta de Catalunya/Programes/COVID-19/Shiny')
library(shiny)
library(ggplot2)
library(rvest)
library(deSolve)
library(stringr)
GetData <- function(country){
if (country == "Germany") {
# Fetch from Wikipedia
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Germany#Statistics"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first row
colnames(datatable) = datatable[1,]
datatable_clean = datatable[-1,]
# Get infected and remove non-numeric things
Infected = gsub("[^0-9.-]", "", datatable_clean$`Total infections`)
Infected = subset(Infected, grepl('^\\d+$', Infected))
# Get days and remove non dates
Day = datatable_clean$Date
Day = Day[2:length(Day)]
Day = Day[1:length(Day)-1]
Day = format(as.Date(Day, format="%d %b"), format="%d-%m")
}
if (country == "Spain") {
# Fetch from Wikipedia
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first rows
datatable_clean = datatable[11:nrow(datatable)-1,]
# Get infected and remove non-numeric things
Infected <- as.data.frame(datatable_clean$X4)
Infected <- apply(Infected,2,function(x)gsub('\\s+', '',x))
Infected <- as.data.frame(gsub("\\s*\\([^\\)]+\\)","",as.character(Infected)))
Infected <- apply(Infected,2,function(x)gsub("[^0-9.-]", "", x))
# Infected = apply(Infected,2,function(x)gsub('\\s+', '',as.character(x)))
# Get days and remove non dates
Day = datatable_clean$X1
Day = Day[!is.na(as.Date(Day,format="%d-%m-%Y"))]
Day = format(as.Date(Day, format="%d-%m-%Y"), format="%d-%m")
}
df <- data.frame(matrix(unlist(Day), nrow=length(Day), byrow=T))
df["Infected"]=Infected
colnames(df) <- c("Date", "Infected")
# return df
df
}
GetPoblation <- function(c) {
if (identical(c, "Spain")) {
47100396
} else if (identical(c, "Germany")) {
83149300
}
}
country <- "Spain"
dataset <- GetData(country)
Infected <- as.numeric(dataset$Infected)
DateLabels <- dataset$Date
Day <- 1:(length(Infected))
N <- GetPoblation(country)
old <- par(mfrow = c(1, 2))
dataset <- GetData(country)
Infected <- as.numeric(dataset$Infected)
DateLabels <- dataset$Date
Day <- 1:(length(Infected))
N <- GetPoblation(country)
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
t <- 1:80 # time in days
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
col <- 1:3 # colour
View(fit)
runApp('C:/Users/kerik/OneDrive - Universitat Oberta de Catalunya/Programes/COVID-19/Shiny')
SEIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dE <- beta*S*I/N - sigma*E
dI <- sigma*E - gamma * I
dR <- gamma * I
list(c(dS, dE, dI, dR))
})
}
init <- c(S = N-Infected[1], E = Infected[1], I = 0, R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma", "sigma")
out <- ode(y = init, times = Day, func = SEIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5, 0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0, 0), upper = c(1, 1, 1)) # optimize with some sensible conditions
Opt_par <- setNames(Opt$par, c("beta", "gamma", "sigma"))
runApp('C:/Users/kerik/OneDrive - Universitat Oberta de Catalunya/Programes/COVID-19/Shiny')
runApp()
runApp()
runApp('C:/Users/kerik/OneDrive - Universitat Oberta de Catalunya/Programes/COVID-19/Shiny')
runApp()
runApp('C:/Users/kerik/OneDrive - Universitat Oberta de Catalunya/Programes/COVID-19/Shiny')
shiny::runApp()
shiny::runApp()
library(shiny)
library(ggplot2)
library(rvest)
library(deSolve)
library(stringr)
GetData <- function(country){
if (country == "Germany") {
# Fetch from Wikipedia
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Germany#Statistics"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first row
colnames(datatable) = datatable[1,]
datatable_clean = datatable[-1,]
# Get infected and remove non-numeric things
Infected = gsub("[^0-9.-]", "", datatable_clean$`Total infections`)
Infected = subset(Infected, grepl('^\\d+$', Infected))
# Get days and remove non dates
Day = datatable_clean$Date
Day = Day[2:length(Day)]
Day = Day[1:length(Day)-1]
Day = format(as.Date(Day, format="%d %b"), format="%d-%m")
}
if (country == "Spain") {
# Fetch from Wikipedia
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first rows
datatable_clean = datatable[11:nrow(datatable)-1,]
# Get infected and remove non-numeric things
Infected <- as.data.frame(datatable_clean$X4)
Infected <- apply(Infected,2,function(x)gsub('\\s+', '',x))
Infected <- as.data.frame(gsub("\\s*\\([^\\)]+\\)","",as.character(Infected)))
Infected <- apply(Infected,2,function(x)gsub("[^0-9.-]", "", x))
# Infected = apply(Infected,2,function(x)gsub('\\s+', '',as.character(x)))
# Get days and remove non dates
Day = datatable_clean$X1
Day = Day[!is.na(as.Date(Day,format="%d-%m-%Y"))]
Day = format(as.Date(Day, format="%d-%m-%Y"), format="%d-%m")
}
df <- data.frame(matrix(unlist(Day), nrow=length(Day), byrow=T))
df["Infected"]=Infected
colnames(df) <- c("Date", "Infected")
# return df
df
}
GetPoblation <- function(c) {
if (identical(c, "Spain")) {
47100396
} else if (identical(c, "Germany")) {
83149300
}
}
country <- "Spain"
country <- input$countryInput[1]
model <- input$modelInput[1]
old <- par(mfrow = c(1, 2))
dataset <- GetData(country)
Infected <- as.numeric(dataset$Infected)
DateLabels <- dataset$Date
Day <- 1:(length(Infected))
N <- GetPoblation(country)
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -R0/N * I * S
dI <- R0/N * I * S -  I
dR <- I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("R0")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5), RSS, method = "L-BFGS-B", lower = 0, upper = 5) # optimize with some sensible conditions
Opt_par <- setNames(Opt$par, c("R0"))
t <- 1:80 # time in days
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
col <- 1:3 # colour
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Day, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"), lty = 1, lwd = 2, col = col, inset = 0.05)
title(paste("SIR model COVID-19", country, sep= " - "), outer = TRUE, line = -2)
fit[fit$I == max(fit$I)]
fit[fit$I == max(fit$I), "I", drop = FALSE]
View(fit)
fit[fit$I == max(fit$I), "time", drop = FALSE]
time_peak <- fit[fit$I == max(fit$I), "time", drop = FALSE]
View(time_peak)
firstDay <- min(DateLabels)
firstDay <- min(as.Date(DateLabels))
firstDay <- min(as.Date(DateLabels,  format="%d-%m")))
firstDay <- min(as.Date(DateLabels,  format="%d-%m"))
peak_day <- as.Date(firstDay) + time_peak - 1
peak_day <- as.Date(firstDay) + time_peak[1] - 1
peak_day <- as.Date(firstDay) + max(time_peak) - 1
peak_day <- as.Date(peak_day, format = "%d-%m-%Y")
peak_day
peak_day <- strptime(as.character(peak_day), "%d-%m-%Y"))
peak_day <- strptime(as.character(peak_day), "%d-%m-%Y")
View(peak_day)
peak_day <- strptime(peak_day, "%d-%m-%Y")
View(peak_day)
peak_day <- as.Date(firstDay) + max(time_peak) - 1
peak_day <- strptime(peak_day, "%d-%m-%Y")
View(peak_day)
peak_day <- format(peak_day, "%d-%m-%Y")
peak_day <- as.Date(firstDay) + max(time_peak) - 1
peak_day <- format(peak_day, "%d-%m-%Y")
runApp()
View(dataset)
runApp()
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
View(datatable)
datatable_clean = datatable[29:nrow(datatable)-1,]
View(datatable_clean)
View(datatable_clean)
View(datatable)
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]/tbody') %>%
html_table(fill = TRUE)
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first rows
datatable_clean = datatable[11:nrow(datatable)-1,]
# Get infected and remove non-numeric things
Infected <- as.data.frame(datatable_clean$X4)
Infected <- apply(Infected,2,function(x)gsub('\\s+', '',x))
Infected <- as.data.frame(gsub("\\s*\\([^\\)]+\\)","",as.character(Infected)))
Infected <- apply(Infected,2,function(x)gsub("[^0-9.-]", "", x))
recovery = 14
for (i in seq(recovery, length(Infected))) {
Infected[i] = Infected[i] - Infected[i-recovery]
}
Infected[2]
for (i in seq(recovery, length(Infected))) {
Infected[i] = Infected[i] - Infected[i-recovery+1]
}
for (i in seq(recovery, length(Infected))) {
Infected[i] = Infected[i] - Infected[i-recovery+2]
}
for (i in seq(recovery, length(Infected))) {
Infected[i] = as.numeric(Infected[i]) - as.numeric(Infected[i-recovery])
}
for (i in seq(recovery, length(Infected))) {
Infected[i] = as.numeric(Infected[i]) - as.numeric(Infected[i-recovery+1])
}
View(Infected)
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
# Delete first rows
datatable_clean = datatable[11:nrow(datatable)-1,]
# Get infected and remove non-numeric things
Infected <- as.data.frame(datatable_clean$X4)
Infected <- apply(Infected,2,function(x)gsub('\\s+', '',x))
Infected <- as.data.frame(gsub("\\s*\\([^\\)]+\\)","",as.character(Infected)))
Infected <- apply(Infected,2,function(x)gsub("[^0-9.-]", "", x))
View(Infected)
recovery = 14
for (i in seq(recovery, length(Infected))) {
Infected[i] = as.numeric(Infected[i]) - as.numeric(Infected[i-recovery+1])
}
Infected <- as.data.frame(datatable_clean$X4)
Infected <- apply(Infected,2,function(x)gsub('\\s+', '',x))
Infected <- as.data.frame(gsub("\\s*\\([^\\)]+\\)","",as.character(Infected)))
Infected <- apply(Infected,2,function(x)gsub("[^0-9.-]", "", x))
recovery = 18
for (i in seq(recovery, length(Infected))) {
Infected[i] = as.numeric(Infected[i]) - as.numeric(Infected[i-recovery+1])
}
View(Infected)
View(datatable_clean)
dataUrl <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
View(datatable)
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
View(datatable)
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[6]') %>%
html_table(fill = TRUE)
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[5]') %>%
html_table(fill = TRUE)
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[4]') %>%
html_table(fill = TRUE)
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
dataURL <- "https://es.wikipedia.org/wiki/Pandemia_de_enfermedad_por_coronavirus_de_2020_en_Espa%C3%B1a"
dataURL <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable = dataURL %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[6]') %>%
html_table(fill = TRUE)
View(datatable)
View(datatable)
dataURL2 <- "https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_Spain"
datatable2 = dataURL2 %>%
read_html() %>%
html_node(xpath = '//*[@id="mw-content-text"]/div/table[3]') %>%
html_table(fill = TRUE)
View(datatable2)
stupid_columns = paste("X", seq(1, ncol(datatable2)))
stupid_columns = paste("X", seq(1, ncol(datatable2)), sep="")
colnames(datatable2) <- stupid_columns
View(datatable2)
deaths <- dataset2$X24
deaths <- datatable2$X24
confirmed_new <- datatable2$X22
